//Java Syntax Specification
//Programs

    compilation_unit : import_declarations? type_declarations?

//Declarations

    import_declarations : import_declaration | 
                              import_declarations import_declaration

    import_declaration : single_type_import_declaration

    single_type_import_declaration : import type_name ;

    type_declarations : type_declaration | 
                            type_declarations type_declaration

    type_declaration : class_declaration | ;

    class_declaration : class_modifiers? class identifier super? class_body

    class_modifiers : class_modifier | 
                          class_modifiers class_modifier

    class_modifier : public | abstract

    super : extends class_type

    class_body : { class_body_declarations? }

    class_body_declarations : class_body_declaration |
                                 class_body_declarations class_body_declaration

    class_body_declaration : class_member_declaration | 
                                 static_initializer | 
                                 constructor_declaration

    class_member_declaration : field_declaration | 
                                   method_declaration

    static_initializer : static block

    constructor_declaration : constructor_modifiers? constructor_declarator  constructor_body

    constructor_modifiers : constructor_modifier | 
                                constructor_modifiers constructor_modifier

    constructor_modifier : public | private

    constructor_declarator : simple_type_name ( formal_parameter_list? )

    formal_parameter_list : formal_parameter | 
                                formal_parameter_list , formal_parameter

    formal_parameter : type variable_declarator_id

    constructor_body : { explicit_constructor_invocation? block_statements? }

    explicit_constructor_invocation: this ( argument_list? ) | 
                                         super ( argument_list? )

    field_declaration : field_modifiers? type variable_declarators ;

    field_modifiers : field_modifier | 
                          field_modifiers field_modifier

    field_modifier : public | private | static

    variable_declarators : variable_declarator | 
                               variable_declarators , variable_declarator

    variable_declarator : variable_declarator_id | 
                              variable_declarator_id = variable_initializer

    variable_declarator_id : identifier | <
                                 variable_declarator_id> [ ]

    variable_initializer : expression | array_initializer

    method_declaration : method_header method_body

    method_header : method_modifiers? result_type method_declarator 

    result_type : type | void

    method_modifiers : method_modifier | 

                           method_modifiers method_modifier

    method_modifier : public | private | static | abstract

    method_declarator : identifier ( formal_parameter_list? )

    method_body : block | ;

    array_initializer : { variable_initializers? , ? }

    variable_initializers : variable_initializer | 
                                variable_initializers , variable_initializer

    variable_initializer : expression | array_initializer

Types

    type : primitive_type | reference_type

    primitive_type : numeric_type | boolean

    numeric_type : integral_type | <floating_point_type>

    integral_type : int | char

    floating_point_type : float 

    reference_type : class_type | array_type

    class_type : type_name
    
    array_type : type [ ]

Blocks_and Commands

    block : { block_statements? }

    block_statements : block_statement | 
                           block_statements block_statement

    block_statement : local_variable_declaration_statement | 
                          statement

    local_variable_declaration_statement : local_variable_declaration ;

    local_variable_declaration : type variable_declarators

    statement : statement_without_trailing_substatement | 
                    if_then_statement |
                    if_then_else_statement | 
                    while_statement | 
                    for_statement

    statement_no_short_if : statement_without_trailing_substatement | 
                                labeled_statement_no_short_if | 
                                if_then_else_statement_no_short_if | 
                                while_statement_no_short_if | 
                                for_statement_no_short_if

    statement_without_trailing_substatement : block | 
                                                  empty_statement | 
                                                  expression_statement | 
                                                  break_statement | 
                                                  continue_statement | 
                                                  return_statement 
    empty_statement : ;

    expression_statement : statement_expression ;

    statement_expression : assignment | 
                               preincrement_expression | 
                               postincrement_expression | 
                               predecrement_expression | 
                               postdecrement_expression | 
                               method_invocation | 
                               class_instance_creation_expression

    if_then_statement: if ( expression ) statement

    if_then_else_statement: if ( expression ) statement_no_short_if 
                                else statement

    if_then_else_statement_no_short_if : if ( expression ) 
                                             statement_no_short_if 
                                             else statement_no_short_if

    while_statement : while ( expression ) statement

    while_statement_no_short_if : while ( expression ) 
                                      statement_no_short_if

    for_statement : for ( for_init? ; expression? ; for_update? ) 
                        statement

    for_statement_no_short_if : for ( for_init? ; expression? ; for_update? ) 
                                    statement_no_short_if

    for_init : statement_expression_list | 
                   local_variable_declaration

    for_update : statement_expression_list

    statement_expression_list : statement_expression | 
                                    statement_expression_list , statement_expression

    break_statement : break identifier? ;

    continue_statement : continue identifier? ;

    return_statement : return expression? ;

Expressions

    constant_expression : expression

    expression : assignment_expression

    assignment_expression : conditional_expression | 
                                assignment

    assignment : left_hand_side assignment_operator assignment_expression

    left_hand_side : expression_name | field_access | array_access

    assignment_operator : = | *= | /= | %= | += | -= | <<= | >>= | &= | ^= | |=

    conditional_expression : conditional_or_expression | 
                                 conditional_or_expression ? expression : conditional_expression

    conditional_or_expression : conditional_and_expression | 
                                    conditional_or_expression || conditional_and_expression

    conditional_and_expression : inclusive_or_expression | 
                                     conditional_and_expression && inclusive_or_expression

    inclusive_or_expression : exclusive_or_expression | 
                                  inclusive_or_expression | 
                                  exclusive_or_expression

    exclusive_or_expression : and_expression | 
                                  exclusive_or_expression ^ and_expression

    and_expression : equality_expression | 
                         and_expression & equality_expression

    equality_expression : relational_expression | 
                              equality_expression == relational_expression | 
                              equality_expression != relational_expression

    relational_expression : shift_expression | 
                                relational_expression < shift_expression | 
                                relational_expression > shift_expression  | 
                                relational_expression <= shift_expression | 
                                relational_expression >= shift_expression | 
                                relational_expression instanceof reference_type

    shift_expression : additive_expression | 
                           shift_expression << additive_expression |
                           shift_expression >> additive_expression | 
                           shift_expression >>> additive_expression

    additive_expression : multiplicative_expression | 
                              additive_expression + multiplicative_expression | 
                              additive_expression - multiplicative_expression

    multiplicative_expression : unary_expression | 
                                    multiplicative_expression * unary_expression | 
                                    multiplicative_expression / unary_expression | 
                                    multiplicative_expression % unary_expression

    cast_expression : ( primitive_type ) unary_expression |
                          ( reference_type ) unary_expression_not_plus_minus

    unary_expression : preincrement_expression | 
                           predecrement_expression | 
                           + unary_expression | 
                           - unary_expression | 
                           unary_expression_not_plus_minus

    predecrement_expression : -- unary_expression

    preincrement_expression : ++ unary_expression

    unary_expression_not_plus_minus : postfix_expression | 
                                          ~ unary_expression | 
                                          ! unary_expression | 
                                          cast_expression

    postdecrement_expression : postfix_expression --

    postincrement_expression : postfix_expression ++

    postfix_expression : primary | 
                             expression_name | 
                             postincrement_expression | 
                             postdecrement_expression

    method_invocation : method_name ( argument_list? ) | 
                            primary . identifier ( argument_list? ) | 
                            super . identifier ( argument_list? )

    field_access : primary . identifier | 
                       super . identifier

    primary : primary_no_new_array | 
                  array_creation_expression

    primary_no_new_array : literal | 
                               this | ( expression ) | 
                               class_instance_creation_expression | 
                               field_access | 
                               method_invocation | 
                               array_access

    class_instance_creation_expression : new class_type ( argument_list? )

    argument_list : expression | 
                        argument_list , expression

    array_creation_expression : new primitive_type dim_exprs dims? | 
                                    new class_type dim_exprs dims?

    dim_exprs : dim_expr | 
                    dim_exprs dim_expr

    dim_expr : [ expression ]

    dims : [ ] | dims [ ]

    array_access : expression_name [ expression ] | 
                       primary_no_new_array [ expression]

Tokens

    type_name : identifier

    simple_type_name : identifier

    expression_name : identifier | 
                          ambiguous_name . identifier

    method_name : identifier | 
                      ambiguous_name. identifier

    ambiguous_name: identifier | 
                        ambiguous_name. identifier

    literal : integer_literal | 
                  floating_point_literal |
                  boolean_literal | 
                  character_literal | 
                  string_literal | 
                  null_literal

    integer_literal : decimal_integer_literal 

    decimal_integer_literal : decimal_numeral integer_type_suffix?

    integer_type_suffix : 'l' | 'L' 
    decimal_numeral : '0' | non_zero_digit digits?

    digits : digit | digits digit

    digit : '0' | non_zero_digit

    non_zero_digit : '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' 
    floating_point_literal : digits . digits? exponent_part? float_type_suffix?

    digits exponent_part? float_type_suffix?

    exponent_part : exponent_indicator signed_integer

    exponent_indicator : 'e' | 'E' 
    signed_integer : sign? digits

    sign : '+' | '-'

    FLOAT_TYPE_SUFFIX : 'f' | 'F' |

    BOOLEAN_LITERAL : 'true' | 'false'

    character_literal : '\ single_character '\ |
                            '\ escape_sequence '\

    single_character : input_character except '\ and \

    string_literal : " string_characters?"

    string_characters : string_character | 
                            string_characters string_character

    string_character : input_character except " and \ | 
                           escape_character

    null_literal : null

    KEYWORD : 'abstract' | 'boolean' | 'break' | 'char' | 'class' | 'continue' |
                  'else' | 'extends' | 'float' | 'for' | 'if' | 'implements' | 'import' | 
                  'instanceof' | 'int' | 'new' | 'private'  | 'public' | 'return' | 
                  'static' | 'super' | 'this' | 'void' | 'while' 